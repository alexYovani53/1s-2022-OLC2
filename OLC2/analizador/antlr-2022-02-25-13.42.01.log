2022-02-25 13:41:53:671 grammar LogManager.java:25 before: (PARSER_GRAMMAR Calc (OPTIONS (= tokenVocab CalcLexer)) (@ header {

    import "OLC2/analizador/ast"
    import "OLC2/analizador/ast/interfaces"
    import "OLC2/analizador/ast/expresion"
    import "OLC2/analizador/ast/funbasica"
    import "OLC2/analizador/ast/definicion"
    import "OLC2/analizador/ast/control"
    import "OLC2/analizador/ast/other"
    import "OLC2/analizador/ast/transferenciaFlujo"
    import "OLC2/analizador/entorno"
    import "OLC2/analizador/entorno/Simbolos"
    import arrayList "github.com/colegno/arraylist"
}) (@ members {
    type  Prueba2 struct {
        Op1 int
        Operador string
        Op2 int
    }
}) (RULES (RULE start (returns ast.Ast  ast) (BLOCK (ALT listaFunciones { $ast = ast.NewAst( $listaFunciones.lista)}))) (RULE listaFunciones (returns *arrayList.List lista) (@ init {
    $lista = arrayList.New()
}) (BLOCK (ALT (= SUBLISTA listaFunciones) funcionItem {
                                                $SUBLISTA.lista.Add( $funcionItem.instr)
                                                $lista =  $SUBLISTA.lista
    }) (ALT funcionItem { $lista.Add( $funcionItem.instr ) }))) (RULE funcionItem (returns  interfaces.Instruccion  instr) (@ init { listaParams :=  arrayList.New() }) (BLOCK (ALT funcmain {$instr =  $funcmain.instr}) (ALT modaccess tiposvars ID '(' ')' bloque { $instr = Simbolos.NewFuncion($ID.text,listaParams,$bloque.lista,entorno.VOID)}) (ALT modaccess tiposvars ID '(' parametros ')' bloque { $instr = Simbolos.NewFuncion($ID.text,$parametros.lista,$bloque.lista,$tiposvars.tipo)}))) (RULE modaccess (returns entorno.TipoModAccess  modAccess) (BLOCK (ALT PUBLIC { $modAccess = entorno.PUBLIC}) (ALT PRIVATE { $modAccess = entorno.PRIVATE}) (ALT { $modAccess = entorno.PRIVATE}))) (RULE parametros (returns *arrayList.List lista) (@ init {
$lista =  arrayList.New()
}) (BLOCK (ALT (= sublista parametros) ',' tiposvars ID {
                                                                    listaIdes := arrayList.New()
                                                                    listaIdes.Add(expresion.NewIdentificador($ID.text))
                                                                    decl := definicion.NewDeclaracion(listaIdes, $tiposvars.tipo)
                                                                    $sublista.lista.Add( decl )
                                                                    $lista =  $sublista.lista
                                                                 }) (ALT tiposvars ID {
                                                                    listaIdes := arrayList.New()
                                                                    listaIdes.Add(expresion.NewIdentificador($ID.text))
                                                                    decl := definicion.NewDeclaracion(listaIdes, $tiposvars.tipo)
                                                                    $lista.Add( decl)
                                                                 }))) (RULE funcmain (returns interfaces.Instruccion instr) (@ init { listaParams:= arrayList.New() }) (BLOCK (ALT PUBLIC STATIC VOIDTYPE MAIN '(' STRINGARGS ARGS '[' ']' ')' bloque { $instr = Simbolos.NewFuncion("main",listaParams,$bloque.lista,entorno.VOID)}))) (RULE bloque (returns  *arrayList.List  lista) (BLOCK (ALT L_LLAVE instrucciones R_LLAVE {$lista = $instrucciones.lista }) (ALT L_LLAVE R_LLAVE {$lista = arrayList.New()}))) (RULE instrucciones (returns *arrayList.List lista) (@ init { $lista =  arrayList.New() }) (BLOCK (ALT (+ (BLOCK (ALT (+= e instruccion)))) {
                                                                    listInt := localctx.(*InstruccionesContext).GetE()
                                                                        for _, e := range listInt {
                                                                          $lista.Add(e.GetInstr())
                                                                        }
                                                                    fmt.Printf("tipo %T",localctx.(*InstruccionesContext).GetE())
                                                                }))) (RULE instruccion (returns interfaces.Instruccion instr) (BLOCK (ALT if_instr {$instr = $if_instr.instr}) (ALT consola ';' {$instr = $consola.instr}) (ALT declaracionIni ';' {$instr = $declaracionIni.instr}) (ALT declaracion ';' {$instr = $declaracion.instr}) (ALT llamada ';' {$instr = $llamada.instr}) (ALT retorno ';' {$instr = $retorno.instr}))) (RULE if_instr (returns interfaces.Instruccion instr) (BLOCK (ALT IF_TOK LP expression RP bloque {$instr = control.NewIfInstruccion($expression.expr,$bloque.lista,nil,nil)}) (ALT IF_TOK LP expression RP (= bprincipal bloque) ELSE (= belse bloque) {$instr = control.NewIfInstruccion($expression.expr,$bprincipal.lista,nil,$belse.lista)}) (ALT IF_TOK LP expression RP (= bprincipal bloque) listaelseif ELSE (= belse bloque) {
        $instr = control.NewIfInstruccion($expression.expr,$bprincipal.lista,$listaelseif.lista,$belse.lista)
    }))) (RULE listaelseif (returns *arrayList.List lista) (@ init { $lista = arrayList.New()}) (BLOCK (ALT (+ (BLOCK (ALT (+= list else_if)))) {
                                                                            listInt := localctx.(*ListaelseifContext).GetList()
                                                                            for _, e := range listInt {
                                                                                $lista.Add(e.GetInstr())
                                                                            }
    }))) (RULE else_if (returns interfaces.Instruccion instr) (BLOCK (ALT ELSE IF_TOK LP expression RP bloque {$instr = control.NewIfInstruccion($expression.expr,$bloque.lista,nil,nil)}))) (RULE consola (returns interfaces.Instruccion instr) (BLOCK (ALT SYSTEM '.' OUT '.' PRINTLN LP expression RP {$instr = funbasica.NewImprimir($expression.expr)}))) (RULE llamada (returns interfaces.Instruccion instr, interfaces.Expresion expr) (BLOCK (ALT ID '(' ')' {
                                                                        $instr = other.NewLlamada($ID.text, arrayList.New())
                                                                        $expr = other.NewLlamada($ID.text, arrayList.New())}) (ALT ID '(' listaExpresiones ')' {
                                                                        $instr = other.NewLlamada($ID.text, $listaExpresiones.lista)
                                                                        $expr = other.NewLlamada($ID.text, $listaExpresiones.lista)}))) (RULE listaExpresiones (returns *arrayList.List lista) (@ init {
    $lista = arrayList.New()
}) (BLOCK (ALT (= LISTA listaExpresiones) ',' expression {
                                                                        $LISTA.lista.Add( $expression.expr )
                                                                        $lista =  $LISTA.lista
                                                                     }) (ALT expression {
                                                                        $lista.Add( $expression.expr )
                                                                     }))) (RULE declaracionIni (returns interfaces.Instruccion instr) (BLOCK (ALT tiposvars listides '=' expression {
                                                                        $instr = definicion.NewDeclaracionInicializacion($listides.lista,$tiposvars.tipo,$expression.expr)
                                                                     }))) (RULE declaracion (returns interfaces.Instruccion instr) (BLOCK (ALT tiposvars listides {
                                                                        $instr = definicion.NewDeclaracion($listides.lista,$tiposvars.tipo)
                                                                    }))) (RULE retorno (returns interfaces.Instruccion instr) (BLOCK (ALT RETURN_P { $instr = transferenciaFlujo.NewReturn(entorno.VOID,nil)}) (ALT RETURN_P expression { $instr = transferenciaFlujo.NewReturn(entorno.NULL,$expression.expr)}))) (RULE listides (returns *arrayList.List lista) (@ init {  $lista =  arrayList.New() }) (BLOCK (ALT (= sub listides) ',' ID {
                                                                    $sub.lista.Add(expresion.NewIdentificador($ID.text))
                                                                    $lista = $sub.lista
                                                                }) (ALT ID {$lista.Add(expresion.NewIdentificador($ID.text))}))) (RULE tiposvars (returns entorno.TipoDato tipo) (BLOCK (ALT INTTYPE {$tipo = entorno.INTEGER}) (ALT STRINGTYPE {$tipo = entorno.STRING}) (ALT FLOATTYPE {$tipo = entorno.FLOAT}) (ALT BOOLTYPE {$tipo = entorno.BOOLEAN}) (ALT VOIDTYPE {$tipo = entorno.VOID}))) (RULE expression (returns interfaces.Expresion expr) (BLOCK (ALT expr_rel {$expr = $expr_rel.expr}) (ALT expr_arit {$expr = $expr_arit.expr}))) (RULE expr_rel (returns interfaces.Expresion expr) (BLOCK (ALT (= opIz expr_rel) (= op (BLOCK (ALT MAYORIGUAL) (ALT MENORIGUAL) (ALT MENOR) (ALT MAYOR))) (= opDe expr_rel) {$expr = expresion.NewOperacion($opIz.expr,$op.text,$opDe.expr,false)}) (ALT expr_arit {$expr = $expr_arit.expr}))) (RULE expr_arit (returns interfaces.Expresion expr) (BLOCK (ALT '-' (= opU expression) {$expr = expresion.NewOperacion($opU.expr,"-",nil,true)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '*') (ALT '/'))) (= opDe expr_arit) {$expr = expresion.NewOperacion($opIz.expr,$op.text,$opDe.expr,false)}) (ALT (= opIz expr_arit) (= op (BLOCK (ALT '+') (ALT '-'))) (= opDe expr_arit) {$expr = expresion.NewOperacion($opIz.expr,$op.text,$opDe.expr,false)}) (ALT expr_valor {$expr = $expr_valor.expr}) (ALT LP expression RP {$expr = $expression.expr}))) (RULE expr_valor (returns interfaces.Expresion expr) (BLOCK (ALT primitivo {$expr = $primitivo.expr}) (ALT llamada {$expr = $llamada.expr}))) (RULE primitivo (returns interfaces.Expresion expr) (BLOCK (ALT NUMBER {
                                                                    num,err := strconv.Atoi($NUMBER.text)
                                                                    if err!= nil{
                                                                        fmt.Println(err)
                                                                    }
                                                                    $expr = expresion.NewPrimitivo (num,entorno.INTEGER)
                                                                }) (ALT FLOAT {
                                                                     num,err := strconv.ParseFloat($FLOAT.text,64)
                                                                     if err!= nil{
                                                                         fmt.Println(err)
                                                                     }
                                                                     $expr = expresion.NewPrimitivo (num,entorno.FLOAT)
                                                                }) (ALT STRING {
                                                                    str:= $STRING.text[1:len($STRING.text)-1]
                                                                    $expr = expresion.NewPrimitivo(str,entorno.STRING)
                                                                }) (ALT ID { $expr = expresion.NewIdentificador($ID.text)}) (ALT TRUE { $expr = expresion.NewPrimitivo(true,entorno.BOOLEAN)}) (ALT FALSE { $expr = expresion.NewPrimitivo(false,entorno.BOOLEAN)})))))
2022-02-25 13:41:53:728 grammar LogManager.java:25 after: (PARSER_GRAMMAR Calc (OPTIONS (= tokenVocab CalcLexer)) (@ header {

    import "OLC2/analizador/ast"
    import "OLC2/analizador/ast/interfaces"
    import "OLC2/analizador/ast/expresion"
    import "OLC2/analizador/ast/funbasica"
    import "OLC2/analizador/ast/definicion"
    import "OLC2/analizador/ast/control"
    import "OLC2/analizador/ast/other"
    import "OLC2/analizador/ast/transferenciaFlujo"
    import "OLC2/analizador/entorno"
    import "OLC2/analizador/entorno/Simbolos"
    import arrayList "github.com/colegno/arraylist"
}) (@ members {
    type  Prueba2 struct {
        Op1 int
        Operador string
        Op2 int
    }
}) (RULES (RULE start (returns ast.Ast  ast) (BLOCK (ALT listaFunciones { $ast = ast.NewAst( $listaFunciones.lista)}))) (RULE listaFunciones (returns *arrayList.List lista) (@ init {
    $lista = arrayList.New()
}) (BLOCK (ALT (= SUBLISTA listaFunciones) funcionItem {
                                                $SUBLISTA.lista.Add( $funcionItem.instr)
                                                $lista =  $SUBLISTA.lista
    }) (ALT funcionItem { $lista.Add( $funcionItem.instr ) }))) (RULE funcionItem (returns  interfaces.Instruccion  instr) (@ init { listaParams :=  arrayList.New() }) (BLOCK (ALT funcmain {$instr =  $funcmain.instr}) (ALT modaccess tiposvars ID '(' ')' bloque { $instr = Simbolos.NewFuncion($ID.text,listaParams,$bloque.lista,entorno.VOID)}) (ALT modaccess tiposvars ID '(' parametros ')' bloque { $instr = Simbolos.NewFuncion($ID.text,$parametros.lista,$bloque.lista,$tiposvars.tipo)}))) (RULE modaccess (returns entorno.TipoModAccess  modAccess) (BLOCK (ALT PUBLIC { $modAccess = entorno.PUBLIC}) (ALT PRIVATE { $modAccess = entorno.PRIVATE}) (ALT { $modAccess = entorno.PRIVATE}))) (RULE parametros (returns *arrayList.List lista) (@ init {
$lista =  arrayList.New()
}) (BLOCK (ALT (= sublista parametros) ',' tiposvars ID {
                                                                    listaIdes := arrayList.New()
                                                                    listaIdes.Add(expresion.NewIdentificador($ID.text))
                                                                    decl := definicion.NewDeclaracion(listaIdes, $tiposvars.tipo)
                                                                    $sublista.lista.Add( decl )
                                                                    $lista =  $sublista.lista
                                                                 }) (ALT tiposvars ID {
                                                                    listaIdes := arrayList.New()
                                                                    listaIdes.Add(expresion.NewIdentificador($ID.text))
                                                                    decl := definicion.NewDeclaracion(listaIdes, $tiposvars.tipo)
                                                                    $lista.Add( decl)
                                                                 }))) (RULE funcmain (returns interfaces.Instruccion instr) (@ init { listaParams:= arrayList.New() }) (BLOCK (ALT PUBLIC STATIC VOIDTYPE MAIN '(' STRINGARGS ARGS '[' ']' ')' bloque { $instr = Simbolos.NewFuncion("main",listaParams,$bloque.lista,entorno.VOID)}))) (RULE bloque (returns  *arrayList.List  lista) (BLOCK (ALT L_LLAVE instrucciones R_LLAVE {$lista = $instrucciones.lista }) (ALT L_LLAVE R_LLAVE {$lista = arrayList.New()}))) (RULE instrucciones (returns *arrayList.List lista) (@ init { $lista =  arrayList.New() }) (BLOCK (ALT (+ (BLOCK (ALT (+= e instruccion)))) {
                                                                    listInt := localctx.(*InstruccionesContext).GetE()
                                                                        for _, e := range listInt {
                                                                          $lista.Add(e.GetInstr())
                                                                        }
                                                                    fmt.Printf("tipo %T",localctx.(*InstruccionesContext).GetE())
                                                                }))) (RULE instruccion (returns interfaces.Instruccion instr) (BLOCK (ALT if_instr {$instr = $if_instr.instr}) (ALT consola ';' {$instr = $consola.instr}) (ALT declaracionIni ';' {$instr = $declaracionIni.instr}) (ALT declaracion ';' {$instr = $declaracion.instr}) (ALT llamada ';' {$instr = $llamada.instr}) (ALT retorno ';' {$instr = $retorno.instr}))) (RULE if_instr (returns interfaces.Instruccion instr) (BLOCK (ALT IF_TOK LP expression RP bloque {$instr = control.NewIfInstruccion($expression.expr,$bloque.lista,nil,nil)}) (ALT IF_TOK LP expression RP (= bprincipal bloque) ELSE (= belse bloque) {$instr = control.NewIfInstruccion($expression.expr,$bprincipal.lista,nil,$belse.lista)}) (ALT IF_TOK LP expression RP (= bprincipal bloque) listaelseif ELSE (= belse bloque) {
        $instr = control.NewIfInstruccion($expression.expr,$bprincipal.lista,$listaelseif.lista,$belse.lista)
    }))) (RULE listaelseif (returns *arrayList.List lista) (@ init { $lista = arrayList.New()}) (BLOCK (ALT (+ (BLOCK (ALT (+= list else_if)))) {
                                                                            listInt := localctx.(*ListaelseifContext).GetList()
                                                                            for _, e := range listInt {
                                                                                $lista.Add(e.GetInstr())
                                                                            }
    }))) (RULE else_if (returns interfaces.Instruccion instr) (BLOCK (ALT ELSE IF_TOK LP expression RP bloque {$instr = control.NewIfInstruccion($expression.expr,$bloque.lista,nil,nil)}))) (RULE consola (returns interfaces.Instruccion instr) (BLOCK (ALT SYSTEM '.' OUT '.' PRINTLN LP expression RP {$instr = funbasica.NewImprimir($expression.expr)}))) (RULE llamada (returns interfaces.Instruccion instr, interfaces.Expresion expr) (BLOCK (ALT ID '(' ')' {
                                                                        $instr = other.NewLlamada($ID.text, arrayList.New())
                                                                        $expr = other.NewLlamada($ID.text, arrayList.New())}) (ALT ID '(' listaExpresiones ')' {
                                                                        $instr = other.NewLlamada($ID.text, $listaExpresiones.lista)
                                                                        $expr = other.NewLlamada($ID.text, $listaExpresiones.lista)}))) (RULE listaExpresiones (returns *arrayList.List lista) (@ init {
    $lista = arrayList.New()
}) (BLOCK (ALT (= LISTA listaExpresiones) ',' expression {
                                                                        $LISTA.lista.Add( $expression.expr )
                                                                        $lista =  $LISTA.lista
                                                                     }) (ALT expression {
                                                                        $lista.Add( $expression.expr )
                                                                     }))) (RULE declaracionIni (returns interfaces.Instruccion instr) (BLOCK (ALT tiposvars listides '=' expression {
                                                                        $instr = definicion.NewDeclaracionInicializacion($listides.lista,$tiposvars.tipo,$expression.expr)
                                                                     }))) (RULE declaracion (returns interfaces.Instruccion instr) (BLOCK (ALT tiposvars listides {
                                                                        $instr = definicion.NewDeclaracion($listides.lista,$tiposvars.tipo)
                                                                    }))) (RULE retorno (returns interfaces.Instruccion instr) (BLOCK (ALT RETURN_P { $instr = transferenciaFlujo.NewReturn(entorno.VOID,nil)}) (ALT RETURN_P expression { $instr = transferenciaFlujo.NewReturn(entorno.NULL,$expression.expr)}))) (RULE listides (returns *arrayList.List lista) (@ init {  $lista =  arrayList.New() }) (BLOCK (ALT (= sub listides) ',' ID {
                                                                    $sub.lista.Add(expresion.NewIdentificador($ID.text))
                                                                    $lista = $sub.lista
                                                                }) (ALT ID {$lista.Add(expresion.NewIdentificador($ID.text))}))) (RULE tiposvars (returns entorno.TipoDato tipo) (BLOCK (ALT INTTYPE {$tipo = entorno.INTEGER}) (ALT STRINGTYPE {$tipo = entorno.STRING}) (ALT FLOATTYPE {$tipo = entorno.FLOAT}) (ALT BOOLTYPE {$tipo = entorno.BOOLEAN}) (ALT VOIDTYPE {$tipo = entorno.VOID}))) (RULE expression (returns interfaces.Expresion expr) (BLOCK (ALT expr_rel {$expr = $expr_rel.expr}) (ALT expr_arit {$expr = $expr_arit.expr}))) (RULE expr_rel (returns interfaces.Expresion expr) (BLOCK (ALT (= opIz expr_rel) (= op (SET MAYORIGUAL MENORIGUAL MENOR MAYOR)) (= opDe expr_rel) {$expr = expresion.NewOperacion($opIz.expr,$op.text,$opDe.expr,false)}) (ALT expr_arit {$expr = $expr_arit.expr}))) (RULE expr_arit (returns interfaces.Expresion expr) (BLOCK (ALT '-' (= opU expression) {$expr = expresion.NewOperacion($opU.expr,"-",nil,true)}) (ALT (= opIz expr_arit) (= op (SET '*' '/')) (= opDe expr_arit) {$expr = expresion.NewOperacion($opIz.expr,$op.text,$opDe.expr,false)}) (ALT (= opIz expr_arit) (= op (SET '+' '-')) (= opDe expr_arit) {$expr = expresion.NewOperacion($opIz.expr,$op.text,$opDe.expr,false)}) (ALT expr_valor {$expr = $expr_valor.expr}) (ALT LP expression RP {$expr = $expression.expr}))) (RULE expr_valor (returns interfaces.Expresion expr) (BLOCK (ALT primitivo {$expr = $primitivo.expr}) (ALT llamada {$expr = $llamada.expr}))) (RULE primitivo (returns interfaces.Expresion expr) (BLOCK (ALT NUMBER {
                                                                    num,err := strconv.Atoi($NUMBER.text)
                                                                    if err!= nil{
                                                                        fmt.Println(err)
                                                                    }
                                                                    $expr = expresion.NewPrimitivo (num,entorno.INTEGER)
                                                                }) (ALT FLOAT {
                                                                     num,err := strconv.ParseFloat($FLOAT.text,64)
                                                                     if err!= nil{
                                                                         fmt.Println(err)
                                                                     }
                                                                     $expr = expresion.NewPrimitivo (num,entorno.FLOAT)
                                                                }) (ALT STRING {
                                                                    str:= $STRING.text[1:len($STRING.text)-1]
                                                                    $expr = expresion.NewPrimitivo(str,entorno.STRING)
                                                                }) (ALT ID { $expr = expresion.NewIdentificador($ID.text)}) (ALT TRUE { $expr = expresion.NewPrimitivo(true,entorno.BOOLEAN)}) (ALT FALSE { $expr = expresion.NewPrimitivo(false,entorno.BOOLEAN)})))))
2022-02-25 13:41:55:700 left-recursion LogManager.java:25 listaFunciones returns [*arrayList.List lista]
    :   ( {} funcionItem<tokenIndex=65>                                    { $lista.Add( $funcionItem.instr ) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> funcionItem<tokenIndex=59>         {
                                                          $SUBLISTA.lista.Add( $funcionItem.instr)
                                                          $lista =  $SUBLISTA.lista
              }
        )*
    ;
2022-02-25 13:41:55:723 grammar LogManager.java:25 added: (RULE listaFunciones (returns *arrayList.List lista) (BLOCK (ALT (BLOCK (ALT {} (funcionItem (ELEMENT_OPTIONS (= tokenIndex 65))) { $lista.Add( $funcionItem.instr ) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (funcionItem (ELEMENT_OPTIONS (= tokenIndex 59))) {
                                                          $SUBLISTA.lista.Add( $funcionItem.instr)
                                                          $lista =  $SUBLISTA.lista
              }))))))
2022-02-25 13:41:56:449 left-recursion LogManager.java:25 parametros returns [*arrayList.List lista]
    :   ( {} tiposvars<tokenIndex=175> ID<tokenIndex=177>                                               {
                                                                    listaIdes := arrayList.New()
                                                                    listaIdes.Add(expresion.NewIdentificador($ID.text))
                                                                    decl := definicion.NewDeclaracion(listaIdes, $tiposvars.tipo)
                                                                    $lista.Add( decl)
                                                                 } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ','<tokenIndex=165>  tiposvars<tokenIndex=167> ID<tokenIndex=169>                     {
                                                                              listaIdes := arrayList.New()
                                                                              listaIdes.Add(expresion.NewIdentificador($ID.text))
                                                                              decl := definicion.NewDeclaracion(listaIdes, $tiposvars.tipo)
                                                                              $sublista.lista.Add( decl )
                                                                              $lista =  $sublista.lista
                                                                           }
        )*
    ;
2022-02-25 13:41:56:529 grammar LogManager.java:25 added: (RULE parametros (returns *arrayList.List lista) (BLOCK (ALT (BLOCK (ALT {} (tiposvars (ELEMENT_OPTIONS (= tokenIndex 175))) (ID (ELEMENT_OPTIONS (= tokenIndex 177))) {
                                                                    listaIdes := arrayList.New()
                                                                    listaIdes.Add(expresion.NewIdentificador($ID.text))
                                                                    decl := definicion.NewDeclaracion(listaIdes, $tiposvars.tipo)
                                                                    $lista.Add( decl)
                                                                 })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (',' (ELEMENT_OPTIONS (= tokenIndex 165))) (tiposvars (ELEMENT_OPTIONS (= tokenIndex 167))) (ID (ELEMENT_OPTIONS (= tokenIndex 169))) {
                                                                              listaIdes := arrayList.New()
                                                                              listaIdes.Add(expresion.NewIdentificador($ID.text))
                                                                              decl := definicion.NewDeclaracion(listaIdes, $tiposvars.tipo)
                                                                              $sublista.lista.Add( decl )
                                                                              $lista =  $sublista.lista
                                                                           }))))))
2022-02-25 13:41:57:460 left-recursion LogManager.java:25 listaExpresiones returns [*arrayList.List lista]
    :   ( {} expression<tokenIndex=532>                                                    {
                                                                        $lista.Add( $expression.expr )
                                                                     } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ','<tokenIndex=524> expression<tokenIndex=526>                        {
                                                                                  $LISTA.lista.Add( $expression.expr )
                                                                                  $lista =  $LISTA.lista
                                                                               }
        )*
    ;
2022-02-25 13:41:57:465 grammar LogManager.java:25 added: (RULE listaExpresiones (returns *arrayList.List lista) (BLOCK (ALT (BLOCK (ALT {} (expression (ELEMENT_OPTIONS (= tokenIndex 532))) {
                                                                        $lista.Add( $expression.expr )
                                                                     })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (',' (ELEMENT_OPTIONS (= tokenIndex 524))) (expression (ELEMENT_OPTIONS (= tokenIndex 526))) {
                                                                                  $LISTA.lista.Add( $expression.expr )
                                                                                  $lista =  $LISTA.lista
                                                                               }))))))
2022-02-25 13:41:57:848 left-recursion LogManager.java:25 listides returns [*arrayList.List lista]
    :   ( {} ID<tokenIndex=622>                                                        {$lista.Add(expresion.NewIdentificador($ID.text))} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> ','<tokenIndex=614> ID<tokenIndex=616>                                     {
                                                                              $sub.lista.Add(expresion.NewIdentificador($ID.text))
                                                                              $lista = $sub.lista
                                                                          }
        )*
    ;
2022-02-25 13:41:57:858 grammar LogManager.java:25 added: (RULE listides (returns *arrayList.List lista) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 622))) {$lista.Add(expresion.NewIdentificador($ID.text))})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (',' (ELEMENT_OPTIONS (= tokenIndex 614))) (ID (ELEMENT_OPTIONS (= tokenIndex 616))) {
                                                                              $sub.lista.Add(expresion.NewIdentificador($ID.text))
                                                                              $lista = $sub.lista
                                                                          }))))))
2022-02-25 13:41:58:339 left-recursion LogManager.java:25 expr_rel returns [interfaces.Expresion expr]
    :   ( {} expr_arit<tokenIndex=729>  {$expr = $expr_arit.expr} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> op=( MAYORIGUAL<tokenIndex=703> | MENORIGUAL<tokenIndex=707> | MENOR<tokenIndex=711> | MAYOR<tokenIndex=715> ) opDe = expr_rel<tokenIndex=723,p=3> {$expr = expresion.NewOperacion($opIz.expr,$op.text,$opDe.expr,false)}
        )*
    ;
2022-02-25 13:41:58:400 grammar LogManager.java:25 added: (RULE expr_rel (returns interfaces.Expresion expr) (BLOCK (ALT (BLOCK (ALT {} (expr_arit (ELEMENT_OPTIONS (= tokenIndex 729))) {$expr = $expr_arit.expr})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (= op (SET (MAYORIGUAL (ELEMENT_OPTIONS (= tokenIndex 703))) (MENORIGUAL (ELEMENT_OPTIONS (= tokenIndex 707))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 711))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 715))))) (= opDe (expr_rel (ELEMENT_OPTIONS (= tokenIndex 723) (= p 3)))) {$expr = expresion.NewOperacion($opIz.expr,$op.text,$opDe.expr,false)}))))))
2022-02-25 13:41:58:722 left-recursion LogManager.java:25 expr_arit returns [interfaces.Expresion expr]
    :   ( {} '-'<tokenIndex=742> opU = expression<tokenIndex=748>                                      {$expr = expresion.NewOperacion($opU.expr,"-",nil,true)} 
        | expr_valor<tokenIndex=802>                                                {$expr = $expr_valor.expr} 
        | LP<tokenIndex=808> expression<tokenIndex=810> RP<tokenIndex=812>                                          {$expr = $expression.expr} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 4)}?<p=4> op=('*'<tokenIndex=763>|'/'<tokenIndex=765>) opDe = expr_arit<tokenIndex=772,p=5>            {$expr = expresion.NewOperacion($opIz.expr,$op.text,$opDe.expr,false)}
                  | {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> op=('+'<tokenIndex=787>|'-'<tokenIndex=789>) opDe = expr_arit<tokenIndex=796,p=4>            {$expr = expresion.NewOperacion($opIz.expr,$op.text,$opDe.expr,false)}
        )*
    ;
2022-02-25 13:41:58:743 grammar LogManager.java:25 added: (RULE expr_arit (returns interfaces.Expresion expr) (BLOCK (ALT (BLOCK (ALT {} ('-' (ELEMENT_OPTIONS (= tokenIndex 742))) (= opU (expression (ELEMENT_OPTIONS (= tokenIndex 748)))) {$expr = expresion.NewOperacion($opU.expr,"-",nil,true)}) (ALT (expr_valor (ELEMENT_OPTIONS (= tokenIndex 802))) {$expr = $expr_valor.expr}) (ALT (LP (ELEMENT_OPTIONS (= tokenIndex 808))) (expression (ELEMENT_OPTIONS (= tokenIndex 810))) (RP (ELEMENT_OPTIONS (= tokenIndex 812))) {$expr = $expression.expr})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 4)}? (ELEMENT_OPTIONS (= p 4))) (= op (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 763))) ('/' (ELEMENT_OPTIONS (= tokenIndex 765))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 772) (= p 5)))) {$expr = expresion.NewOperacion($opIz.expr,$op.text,$opDe.expr,false)}) (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (= op (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 787))) ('-' (ELEMENT_OPTIONS (= tokenIndex 789))))) (= opDe (expr_arit (ELEMENT_OPTIONS (= tokenIndex 796) (= p 4)))) {$expr = expresion.NewOperacion($opIz.expr,$op.text,$opDe.expr,false)}))))))
2022-02-25 13:41:58:862 grammar LogManager.java:25 import LP=1
2022-02-25 13:41:58:862 grammar LogManager.java:25 import RP=2
2022-02-25 13:41:58:862 grammar LogManager.java:25 import L_LLAVE=3
2022-02-25 13:41:58:862 grammar LogManager.java:25 import R_LLAVE=4
2022-02-25 13:41:58:862 grammar LogManager.java:25 import L_CORCH=5
2022-02-25 13:41:58:862 grammar LogManager.java:25 import R_CORCH=6
2022-02-25 13:41:58:862 grammar LogManager.java:25 import OUT=7
2022-02-25 13:41:58:862 grammar LogManager.java:25 import PRINTLN=8
2022-02-25 13:41:58:863 grammar LogManager.java:25 import IF_TOK=9
2022-02-25 13:41:58:863 grammar LogManager.java:25 import ELSE=10
2022-02-25 13:41:58:863 grammar LogManager.java:25 import ARGS=11
2022-02-25 13:41:58:863 grammar LogManager.java:25 import CLASS=12
2022-02-25 13:41:58:863 grammar LogManager.java:25 import MAIN=13
2022-02-25 13:41:58:863 grammar LogManager.java:25 import PRIVATE=14
2022-02-25 13:41:58:863 grammar LogManager.java:25 import PUBLIC=15
2022-02-25 13:41:58:863 grammar LogManager.java:25 import STATIC=16
2022-02-25 13:41:58:864 grammar LogManager.java:25 import STRINGARGS=17
2022-02-25 13:41:58:864 grammar LogManager.java:25 import RETURN_P=18
2022-02-25 13:41:58:864 grammar LogManager.java:25 import INTTYPE=19
2022-02-25 13:41:58:864 grammar LogManager.java:25 import FLOATTYPE=20
2022-02-25 13:41:58:864 grammar LogManager.java:25 import STRINGTYPE=21
2022-02-25 13:41:58:864 grammar LogManager.java:25 import VOIDTYPE=22
2022-02-25 13:41:58:864 grammar LogManager.java:25 import SYSTEM=23
2022-02-25 13:41:58:865 grammar LogManager.java:25 import BOOLTYPE=24
2022-02-25 13:41:58:865 grammar LogManager.java:25 import PUNTO=25
2022-02-25 13:41:58:865 grammar LogManager.java:25 import COMA=26
2022-02-25 13:41:58:865 grammar LogManager.java:25 import PTCOMA=27
2022-02-25 13:41:58:865 grammar LogManager.java:25 import AND=28
2022-02-25 13:41:58:866 grammar LogManager.java:25 import OR=29
2022-02-25 13:41:58:866 grammar LogManager.java:25 import NOT=30
2022-02-25 13:41:58:867 grammar LogManager.java:25 import IGUAL=31
2022-02-25 13:41:58:867 grammar LogManager.java:25 import DIFERENTE=32
2022-02-25 13:41:58:867 grammar LogManager.java:25 import MAYORIGUAL=33
2022-02-25 13:41:58:867 grammar LogManager.java:25 import MENORIGUAL=34
2022-02-25 13:41:58:867 grammar LogManager.java:25 import MAYOR=35
2022-02-25 13:41:58:867 grammar LogManager.java:25 import MENOR=36
2022-02-25 13:41:58:867 grammar LogManager.java:25 import MUL=37
2022-02-25 13:41:58:867 grammar LogManager.java:25 import DIV=38
2022-02-25 13:41:58:867 grammar LogManager.java:25 import ADD=39
2022-02-25 13:41:58:868 grammar LogManager.java:25 import SUB=40
2022-02-25 13:41:58:868 grammar LogManager.java:25 import NUMBER=41
2022-02-25 13:41:58:869 grammar LogManager.java:25 import FLOAT=42
2022-02-25 13:41:58:869 grammar LogManager.java:25 import STRING=43
2022-02-25 13:41:58:869 grammar LogManager.java:25 import TRUE=44
2022-02-25 13:41:58:869 grammar LogManager.java:25 import FALSE=45
2022-02-25 13:41:58:869 grammar LogManager.java:25 import ID=46
2022-02-25 13:41:58:869 grammar LogManager.java:25 import WHITESPACE=47
2022-02-25 13:41:58:869 grammar LogManager.java:25 import '('=1
2022-02-25 13:41:58:870 grammar LogManager.java:25 import ')'=2
2022-02-25 13:41:58:870 grammar LogManager.java:25 import '{'=3
2022-02-25 13:41:58:870 grammar LogManager.java:25 import '}'=4
2022-02-25 13:41:58:870 grammar LogManager.java:25 import '['=5
2022-02-25 13:41:58:870 grammar LogManager.java:25 import ']'=6
2022-02-25 13:41:58:870 grammar LogManager.java:25 import 'out'=7
2022-02-25 13:41:58:870 grammar LogManager.java:25 import 'println'=8
2022-02-25 13:41:58:870 grammar LogManager.java:25 import 'if'=9
2022-02-25 13:41:58:870 grammar LogManager.java:25 import 'else'=10
2022-02-25 13:41:58:870 grammar LogManager.java:25 import 'args'=11
2022-02-25 13:41:58:871 grammar LogManager.java:25 import 'class'=12
2022-02-25 13:41:58:871 grammar LogManager.java:25 import 'main'=13
2022-02-25 13:41:58:871 grammar LogManager.java:25 import 'private'=14
2022-02-25 13:41:58:871 grammar LogManager.java:25 import 'public'=15
2022-02-25 13:41:58:871 grammar LogManager.java:25 import 'static'=16
2022-02-25 13:41:58:871 grammar LogManager.java:25 import 'String'=17
2022-02-25 13:41:58:871 grammar LogManager.java:25 import 'return'=18
2022-02-25 13:41:58:871 grammar LogManager.java:25 import 'int'=19
2022-02-25 13:41:58:871 grammar LogManager.java:25 import 'float'=20
2022-02-25 13:41:58:871 grammar LogManager.java:25 import 'string'=21
2022-02-25 13:41:58:871 grammar LogManager.java:25 import 'void'=22
2022-02-25 13:41:58:871 grammar LogManager.java:25 import 'system'=23
2022-02-25 13:41:58:872 grammar LogManager.java:25 import 'boolean'=24
2022-02-25 13:41:58:872 grammar LogManager.java:25 import '.'=25
2022-02-25 13:41:58:872 grammar LogManager.java:25 import ','=26
2022-02-25 13:41:58:872 grammar LogManager.java:25 import ';'=27
2022-02-25 13:41:58:872 grammar LogManager.java:25 import '&&'=28
2022-02-25 13:41:58:872 grammar LogManager.java:25 import '||'=29
2022-02-25 13:41:58:872 grammar LogManager.java:25 import '!'=30
2022-02-25 13:41:58:872 grammar LogManager.java:25 import '='=31
2022-02-25 13:41:58:872 grammar LogManager.java:25 import '!='=32
2022-02-25 13:41:58:872 grammar LogManager.java:25 import '>='=33
2022-02-25 13:41:58:872 grammar LogManager.java:25 import '<='=34
2022-02-25 13:41:58:873 grammar LogManager.java:25 import '>'=35
2022-02-25 13:41:58:873 grammar LogManager.java:25 import '<'=36
2022-02-25 13:41:58:873 grammar LogManager.java:25 import '*'=37
2022-02-25 13:41:58:873 grammar LogManager.java:25 import '/'=38
2022-02-25 13:41:58:873 grammar LogManager.java:25 import '+'=39
2022-02-25 13:41:58:873 grammar LogManager.java:25 import '-'=40
2022-02-25 13:41:58:873 grammar LogManager.java:25 import 'true'=44
2022-02-25 13:41:58:873 grammar LogManager.java:25 import 'false'=45
2022-02-25 13:41:58:874 grammar LogManager.java:25 tokens={LP=1, RP=2, L_LLAVE=3, R_LLAVE=4, L_CORCH=5, R_CORCH=6, OUT=7, PRINTLN=8, IF_TOK=9, ELSE=10, ARGS=11, CLASS=12, MAIN=13, PRIVATE=14, PUBLIC=15, STATIC=16, STRINGARGS=17, RETURN_P=18, INTTYPE=19, FLOATTYPE=20, STRINGTYPE=21, VOIDTYPE=22, SYSTEM=23, BOOLTYPE=24, PUNTO=25, COMA=26, PTCOMA=27, AND=28, OR=29, NOT=30, IGUAL=31, DIFERENTE=32, MAYORIGUAL=33, MENORIGUAL=34, MAYOR=35, MENOR=36, MUL=37, DIV=38, ADD=39, SUB=40, NUMBER=41, FLOAT=42, STRING=43, TRUE=44, FALSE=45, ID=46, WHITESPACE=47, '('=1, ')'=2, '{'=3, '}'=4, '['=5, ']'=6, 'out'=7, 'println'=8, 'if'=9, 'else'=10, 'args'=11, 'class'=12, 'main'=13, 'private'=14, 'public'=15, 'static'=16, 'String'=17, 'return'=18, 'int'=19, 'float'=20, 'string'=21, 'void'=22, 'system'=23, 'boolean'=24, '.'=25, ','=26, ';'=27, '&&'=28, '||'=29, '!'=30, '='=31, '!='=32, '>='=33, '<='=34, '>'=35, '<'=36, '*'=37, '/'=38, '+'=39, '-'=40, 'true'=44, 'false'=45}
2022-02-25 13:41:58:875 semantics LogManager.java:25 tokens={EOF=-1, LP=1, RP=2, L_LLAVE=3, R_LLAVE=4, L_CORCH=5, R_CORCH=6, OUT=7, PRINTLN=8, IF_TOK=9, ELSE=10, ARGS=11, CLASS=12, MAIN=13, PRIVATE=14, PUBLIC=15, STATIC=16, STRINGARGS=17, RETURN_P=18, INTTYPE=19, FLOATTYPE=20, STRINGTYPE=21, VOIDTYPE=22, SYSTEM=23, BOOLTYPE=24, PUNTO=25, COMA=26, PTCOMA=27, AND=28, OR=29, NOT=30, IGUAL=31, DIFERENTE=32, MAYORIGUAL=33, MENORIGUAL=34, MAYOR=35, MENOR=36, MUL=37, DIV=38, ADD=39, SUB=40, NUMBER=41, FLOAT=42, STRING=43, TRUE=44, FALSE=45, ID=46, WHITESPACE=47}
2022-02-25 13:41:58:875 semantics LogManager.java:25 strings={'('=1, ')'=2, '{'=3, '}'=4, '['=5, ']'=6, 'out'=7, 'println'=8, 'if'=9, 'else'=10, 'args'=11, 'class'=12, 'main'=13, 'private'=14, 'public'=15, 'static'=16, 'String'=17, 'return'=18, 'int'=19, 'float'=20, 'string'=21, 'void'=22, 'system'=23, 'boolean'=24, '.'=25, ','=26, ';'=27, '&&'=28, '||'=29, '!'=30, '='=31, '!='=32, '>='=33, '<='=34, '>'=35, '<'=36, '*'=37, '/'=38, '+'=39, '-'=40, 'true'=44, 'false'=45}
2022-02-25 13:41:59:038 LL1 LogManager.java:25 
DECISION 0 in rule listaFunciones
2022-02-25 13:41:59:038 LL1 LogManager.java:25 look=[null, <EOF>]
2022-02-25 13:41:59:038 LL1 LogManager.java:25 LL(1)? false
2022-02-25 13:41:59:038 LL1 LogManager.java:25 
DECISION 1 in rule funcionItem
2022-02-25 13:41:59:039 LL1 LogManager.java:25 look=[15, {14..15, 19..22, 24}, {14..15, 19..22, 24}]
2022-02-25 13:41:59:039 LL1 LogManager.java:25 LL(1)? false
2022-02-25 13:41:59:039 LL1 LogManager.java:25 
DECISION 2 in rule modaccess
2022-02-25 13:41:59:039 LL1 LogManager.java:25 look=[15, 14, {19..22, 24}]
2022-02-25 13:41:59:039 LL1 LogManager.java:25 LL(1)? true
2022-02-25 13:41:59:039 LL1 LogManager.java:25 
DECISION 3 in rule parametros
2022-02-25 13:41:59:039 LL1 LogManager.java:25 look=[null, 2]
2022-02-25 13:41:59:040 LL1 LogManager.java:25 LL(1)? false
2022-02-25 13:41:59:040 LL1 LogManager.java:25 
DECISION 4 in rule bloque
2022-02-25 13:41:59:040 LL1 LogManager.java:25 look=[3, 3]
2022-02-25 13:41:59:040 LL1 LogManager.java:25 LL(1)? false
2022-02-25 13:41:59:040 LL1 LogManager.java:25 
DECISION 5 in rule instrucciones
2022-02-25 13:41:59:041 LL1 LogManager.java:25 look=[{9, 18..24, 46}, 4]
2022-02-25 13:41:59:041 LL1 LogManager.java:25 LL(1)? true
2022-02-25 13:41:59:041 LL1 LogManager.java:25 
DECISION 6 in rule instruccion
2022-02-25 13:41:59:042 LL1 LogManager.java:25 look=[9, 23, {19..22, 24}, {19..22, 24}, 46, 18]
2022-02-25 13:41:59:042 LL1 LogManager.java:25 LL(1)? false
2022-02-25 13:41:59:042 LL1 LogManager.java:25 
DECISION 7 in rule if_instr
2022-02-25 13:41:59:042 LL1 LogManager.java:25 look=[9, 9, 9]
2022-02-25 13:41:59:042 LL1 LogManager.java:25 LL(1)? false
2022-02-25 13:41:59:042 LL1 LogManager.java:25 
DECISION 8 in rule listaelseif
2022-02-25 13:41:59:043 LL1 LogManager.java:25 look=[10, 10]
2022-02-25 13:41:59:043 LL1 LogManager.java:25 LL(1)? false
2022-02-25 13:41:59:043 LL1 LogManager.java:25 
DECISION 9 in rule llamada
2022-02-25 13:41:59:043 LL1 LogManager.java:25 look=[46, 46]
2022-02-25 13:41:59:043 LL1 LogManager.java:25 LL(1)? false
2022-02-25 13:41:59:043 LL1 LogManager.java:25 
DECISION 10 in rule listaExpresiones
2022-02-25 13:41:59:046 LL1 LogManager.java:25 look=[null, 2]
2022-02-25 13:41:59:047 LL1 LogManager.java:25 LL(1)? false
2022-02-25 13:41:59:047 LL1 LogManager.java:25 
DECISION 11 in rule retorno
2022-02-25 13:41:59:047 LL1 LogManager.java:25 look=[18, 18]
2022-02-25 13:41:59:047 LL1 LogManager.java:25 LL(1)? false
2022-02-25 13:41:59:047 LL1 LogManager.java:25 
DECISION 12 in rule listides
2022-02-25 13:41:59:048 LL1 LogManager.java:25 look=[null, {27, 31}]
2022-02-25 13:41:59:048 LL1 LogManager.java:25 LL(1)? false
2022-02-25 13:41:59:048 LL1 LogManager.java:25 
DECISION 13 in rule tiposvars
2022-02-25 13:41:59:048 LL1 LogManager.java:25 look=[19, 21, 20, 24, 22]
2022-02-25 13:41:59:048 LL1 LogManager.java:25 LL(1)? true
2022-02-25 13:41:59:048 LL1 LogManager.java:25 
DECISION 14 in rule expression
2022-02-25 13:41:59:049 LL1 LogManager.java:25 look=[{1, 40..46}, {1, 40..46}]
2022-02-25 13:41:59:049 LL1 LogManager.java:25 LL(1)? false
2022-02-25 13:41:59:049 LL1 LogManager.java:25 
DECISION 15 in rule expr_rel
2022-02-25 13:41:59:051 LL1 LogManager.java:25 look=[null, null]
2022-02-25 13:41:59:051 LL1 LogManager.java:25 LL(1)? false
2022-02-25 13:41:59:051 LL1 LogManager.java:25 
DECISION 16 in rule expr_arit
2022-02-25 13:41:59:051 LL1 LogManager.java:25 look=[40, {41..46}, 1]
2022-02-25 13:41:59:051 LL1 LogManager.java:25 LL(1)? true
2022-02-25 13:41:59:051 LL1 LogManager.java:25 
DECISION 17 in rule expr_arit
2022-02-25 13:41:59:051 LL1 LogManager.java:25 look=[null, null]
2022-02-25 13:41:59:051 LL1 LogManager.java:25 LL(1)? false
2022-02-25 13:41:59:051 LL1 LogManager.java:25 
DECISION 18 in rule expr_arit
2022-02-25 13:41:59:052 LL1 LogManager.java:25 look=[null, null]
2022-02-25 13:41:59:052 LL1 LogManager.java:25 LL(1)? false
2022-02-25 13:41:59:052 LL1 LogManager.java:25 
DECISION 19 in rule expr_valor
2022-02-25 13:41:59:052 LL1 LogManager.java:25 look=[{41..46}, 46]
2022-02-25 13:41:59:052 LL1 LogManager.java:25 LL(1)? false
2022-02-25 13:41:59:052 LL1 LogManager.java:25 
DECISION 20 in rule primitivo
2022-02-25 13:41:59:052 LL1 LogManager.java:25 look=[41, 42, 43, 46, 44, 45]
2022-02-25 13:41:59:052 LL1 LogManager.java:25 LL(1)? true
2022-02-25 13:41:59:124 action-translator LogManager.java:25 translate 
    type  Prueba2 struct {
        Op1 int
        Operador string
        Op2 int
    }

2022-02-25 13:41:59:125 action-translator LogManager.java:25 translate 

    import "OLC2/analizador/ast"
    import "OLC2/analizador/ast/interfaces"
    import "OLC2/analizador/ast/expresion"
    import "OLC2/analizador/ast/funbasica"
    import "OLC2/analizador/ast/definicion"
    import "OLC2/analizador/ast/control"
    import "OLC2/analizador/ast/other"
    import "OLC2/analizador/ast/transferenciaFlujo"
    import "OLC2/analizador/entorno"
    import "OLC2/analizador/entorno/Simbolos"
    import arrayList "github.com/colegno/arraylist"

2022-02-25 13:41:59:348 action-translator LogManager.java:25 translate  $ast = ast.NewAst( $listaFunciones.lista)
2022-02-25 13:41:59:349 action-translator LogManager.java:25 attr [@-1,2:4='ast',<0>,33:44]
2022-02-25 13:41:59:350 action-translator LogManager.java:25 qattr [@-1,21:34='listaFunciones',<0>,33:63].[@-1,36:40='lista',<0>,33:78]
2022-02-25 13:41:59:352 action-translator LogManager.java:25 translate 
    $lista = arrayList.New()

2022-02-25 13:41:59:352 action-translator LogManager.java:25 attr [@-1,7:11='lista',<0>,38:5]
2022-02-25 13:41:59:353 action-translator LogManager.java:25 translate 
2022-02-25 13:41:59:353 action-translator LogManager.java:25 translate  $lista.Add( $funcionItem.instr ) 
2022-02-25 13:41:59:355 action-translator LogManager.java:25 attr [@-1,2:6='lista',<0>,2:77]
2022-02-25 13:41:59:356 action-translator LogManager.java:25 qattr [@-1,14:24='funcionItem',<0>,2:89].[@-1,26:30='instr',<0>,2:101]
2022-02-25 13:41:59:357 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-02-25 13:41:59:357 action-translator LogManager.java:25 translate 
                                                          $SUBLISTA.lista.Add( $funcionItem.instr)
                                                          $lista =  $SUBLISTA.lista
              
2022-02-25 13:41:59:358 action-translator LogManager.java:25 qattr [@-1,61:68='SUBLISTA',<0>,6:59].[@-1,70:74='lista',<0>,6:68]
2022-02-25 13:41:59:358 action-translator LogManager.java:25 qattr [@-1,82:92='funcionItem',<0>,6:80].[@-1,94:98='instr',<0>,6:92]
2022-02-25 13:41:59:359 action-translator LogManager.java:25 attr [@-1,161:165='lista',<0>,7:59]
2022-02-25 13:41:59:359 action-translator LogManager.java:25 qattr [@-1,171:178='SUBLISTA',<0>,7:69].[@-1,180:184='lista',<0>,7:78]
2022-02-25 13:41:59:367 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-02-25 13:41:59:373 action-translator LogManager.java:25 translate  listaParams :=  arrayList.New() 
2022-02-25 13:41:59:373 action-translator LogManager.java:25 translate $instr =  $funcmain.instr
2022-02-25 13:41:59:374 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,49:61]
2022-02-25 13:41:59:374 action-translator LogManager.java:25 qattr [@-1,11:18='funcmain',<0>,49:71].[@-1,20:24='instr',<0>,49:80]
2022-02-25 13:41:59:377 action-translator LogManager.java:25 translate  $instr = Simbolos.NewFuncion($ID.text,listaParams,$bloque.lista,entorno.VOID)
2022-02-25 13:41:59:377 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,50:62]
2022-02-25 13:41:59:379 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,50:91].[@-1,34:37='text',<0>,50:94]
2022-02-25 13:41:59:380 action-translator LogManager.java:25 qattr [@-1,52:57='bloque',<0>,50:112].[@-1,59:63='lista',<0>,50:119]
2022-02-25 13:41:59:382 action-translator LogManager.java:25 translate  $instr = Simbolos.NewFuncion($ID.text,$parametros.lista,$bloque.lista,$tiposvars.tipo)
2022-02-25 13:41:59:382 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,51:62]
2022-02-25 13:41:59:383 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,51:91].[@-1,34:37='text',<0>,51:94]
2022-02-25 13:41:59:383 action-translator LogManager.java:25 qattr [@-1,40:49='parametros',<0>,51:100].[@-1,51:55='lista',<0>,51:111]
2022-02-25 13:41:59:383 action-translator LogManager.java:25 qattr [@-1,58:63='bloque',<0>,51:118].[@-1,65:69='lista',<0>,51:125]
2022-02-25 13:41:59:384 action-translator LogManager.java:25 qattr [@-1,72:80='tiposvars',<0>,51:132].[@-1,82:85='tipo',<0>,51:142]
2022-02-25 13:41:59:386 action-translator LogManager.java:25 translate  $modAccess = entorno.PUBLIC
2022-02-25 13:41:59:387 action-translator LogManager.java:25 attr [@-1,2:10='modAccess',<0>,55:62]
2022-02-25 13:41:59:389 action-translator LogManager.java:25 translate  $modAccess = entorno.PRIVATE
2022-02-25 13:41:59:396 action-translator LogManager.java:25 attr [@-1,2:10='modAccess',<0>,56:62]
2022-02-25 13:41:59:397 action-translator LogManager.java:25 translate  $modAccess = entorno.PRIVATE
2022-02-25 13:41:59:399 action-translator LogManager.java:25 attr [@-1,2:10='modAccess',<0>,57:62]
2022-02-25 13:41:59:403 action-translator LogManager.java:25 translate 
$lista =  arrayList.New()

2022-02-25 13:41:59:403 action-translator LogManager.java:25 attr [@-1,3:7='lista',<0>,62:1]
2022-02-25 13:41:59:403 action-translator LogManager.java:25 translate 
2022-02-25 13:41:59:404 action-translator LogManager.java:25 translate 
                                                                    listaIdes := arrayList.New()
                                                                    listaIdes.Add(expresion.NewIdentificador($ID.text))
                                                                    decl := definicion.NewDeclaracion(listaIdes, $tiposvars.tipo)
                                                                    $lista.Add( decl)
                                                                 
2022-02-25 13:41:59:404 action-translator LogManager.java:25 qattr [@-1,210:211='ID',<0>,4:110].[@-1,213:216='text',<0>,4:113]
2022-02-25 13:41:59:405 action-translator LogManager.java:25 qattr [@-1,335:343='tiposvars',<0>,5:114].[@-1,345:348='tipo',<0>,5:124]
2022-02-25 13:41:59:405 action-translator LogManager.java:25 attr [@-1,421:425='lista',<0>,6:69]
2022-02-25 13:41:59:406 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-02-25 13:41:59:407 action-translator LogManager.java:25 translate 
                                                                              listaIdes := arrayList.New()
                                                                              listaIdes.Add(expresion.NewIdentificador($ID.text))
                                                                              decl := definicion.NewDeclaracion(listaIdes, $tiposvars.tipo)
                                                                              $sublista.lista.Add( decl )
                                                                              $lista =  $sublista.lista
                                                                           
2022-02-25 13:41:59:408 action-translator LogManager.java:25 qattr [@-1,230:231='ID',<0>,12:120].[@-1,233:236='text',<0>,12:123]
2022-02-25 13:41:59:410 action-translator LogManager.java:25 qattr [@-1,365:373='tiposvars',<0>,13:124].[@-1,375:378='tipo',<0>,13:134]
2022-02-25 13:41:59:411 action-translator LogManager.java:25 qattr [@-1,461:468='sublista',<0>,14:79].[@-1,470:474='lista',<0>,14:88]
2022-02-25 13:41:59:413 action-translator LogManager.java:25 attr [@-1,568:572='lista',<0>,15:79]
2022-02-25 13:41:59:413 action-translator LogManager.java:25 qattr [@-1,578:585='sublista',<0>,15:89].[@-1,587:591='lista',<0>,15:98]
2022-02-25 13:41:59:414 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-02-25 13:41:59:416 action-translator LogManager.java:25 translate  listaParams:= arrayList.New() 
2022-02-25 13:41:59:417 action-translator LogManager.java:25 translate  $instr = Simbolos.NewFuncion("main",listaParams,$bloque.lista,entorno.VOID)
2022-02-25 13:41:59:418 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,83:6]
2022-02-25 13:41:59:418 action-translator LogManager.java:25 qattr [@-1,50:55='bloque',<0>,83:54].[@-1,57:61='lista',<0>,83:61]
2022-02-25 13:41:59:419 action-translator LogManager.java:25 translate $lista = $instrucciones.lista 
2022-02-25 13:41:59:420 action-translator LogManager.java:25 attr [@-1,1:5='lista',<0>,88:73]
2022-02-25 13:41:59:420 action-translator LogManager.java:25 qattr [@-1,10:22='instrucciones',<0>,88:82].[@-1,24:28='lista',<0>,88:96]
2022-02-25 13:41:59:420 action-translator LogManager.java:25 translate $lista = arrayList.New()
2022-02-25 13:41:59:420 action-translator LogManager.java:25 attr [@-1,1:5='lista',<0>,89:73]
2022-02-25 13:41:59:423 action-translator LogManager.java:25 translate  $lista =  arrayList.New() 
2022-02-25 13:41:59:423 action-translator LogManager.java:25 attr [@-1,2:6='lista',<0>,94:7]
2022-02-25 13:41:59:431 action-translator LogManager.java:25 translate 
                                                                    listInt := localctx.(*InstruccionesContext).GetE()
                                                                        for _, e := range listInt {
                                                                          $lista.Add(e.GetInstr())
                                                                        }
                                                                    fmt.Printf("tipo %T",localctx.(*InstruccionesContext).GetE())
                                                                
2022-02-25 13:41:59:431 action-translator LogManager.java:25 attr [@-1,298:302='lista',<0>,98:75]
2022-02-25 13:41:59:433 action-translator LogManager.java:25 translate $instr = $if_instr.instr
2022-02-25 13:41:59:434 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,106:65]
2022-02-25 13:41:59:434 action-translator LogManager.java:25 qattr [@-1,10:17='if_instr',<0>,106:74].[@-1,19:23='instr',<0>,106:83]
2022-02-25 13:41:59:434 action-translator LogManager.java:25 translate $instr = $consola.instr
2022-02-25 13:41:59:434 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,107:65]
2022-02-25 13:41:59:435 action-translator LogManager.java:25 qattr [@-1,10:16='consola',<0>,107:74].[@-1,18:22='instr',<0>,107:82]
2022-02-25 13:41:59:435 action-translator LogManager.java:25 translate $instr = $declaracionIni.instr
2022-02-25 13:41:59:436 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,108:65]
2022-02-25 13:41:59:436 action-translator LogManager.java:25 qattr [@-1,10:23='declaracionIni',<0>,108:74].[@-1,25:29='instr',<0>,108:89]
2022-02-25 13:41:59:436 action-translator LogManager.java:25 translate $instr = $declaracion.instr
2022-02-25 13:41:59:437 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,109:65]
2022-02-25 13:41:59:437 action-translator LogManager.java:25 qattr [@-1,10:20='declaracion',<0>,109:74].[@-1,22:26='instr',<0>,109:86]
2022-02-25 13:41:59:438 action-translator LogManager.java:25 translate $instr = $llamada.instr
2022-02-25 13:41:59:439 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,110:65]
2022-02-25 13:41:59:439 action-translator LogManager.java:25 qattr [@-1,10:16='llamada',<0>,110:74].[@-1,18:22='instr',<0>,110:82]
2022-02-25 13:41:59:439 action-translator LogManager.java:25 translate $instr = $retorno.instr
2022-02-25 13:41:59:440 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,111:65]
2022-02-25 13:41:59:440 action-translator LogManager.java:25 qattr [@-1,10:16='retorno',<0>,111:74].[@-1,18:22='instr',<0>,111:82]
2022-02-25 13:41:59:449 action-translator LogManager.java:25 translate $instr = control.NewIfInstruccion($expression.expr,$bloque.lista,nil,nil)
2022-02-25 13:41:59:450 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,116:77]
2022-02-25 13:41:59:457 action-translator LogManager.java:25 qattr [@-1,35:44='expression',<0>,116:111].[@-1,46:49='expr',<0>,116:122]
2022-02-25 13:41:59:458 action-translator LogManager.java:25 qattr [@-1,52:57='bloque',<0>,116:128].[@-1,59:63='lista',<0>,116:135]
2022-02-25 13:41:59:460 action-translator LogManager.java:25 translate $instr = control.NewIfInstruccion($expression.expr,$bprincipal.lista,nil,$belse.lista)
2022-02-25 13:41:59:462 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,117:77]
2022-02-25 13:41:59:462 action-translator LogManager.java:25 qattr [@-1,35:44='expression',<0>,117:111].[@-1,46:49='expr',<0>,117:122]
2022-02-25 13:41:59:463 action-translator LogManager.java:25 qattr [@-1,52:61='bprincipal',<0>,117:128].[@-1,63:67='lista',<0>,117:139]
2022-02-25 13:41:59:463 action-translator LogManager.java:25 qattr [@-1,74:78='belse',<0>,117:150].[@-1,80:84='lista',<0>,117:156]
2022-02-25 13:41:59:465 action-translator LogManager.java:25 translate 
        $instr = control.NewIfInstruccion($expression.expr,$bprincipal.lista,$listaelseif.lista,$belse.lista)
    
2022-02-25 13:41:59:465 action-translator LogManager.java:25 attr [@-1,11:15='instr',<0>,119:9]
2022-02-25 13:41:59:465 action-translator LogManager.java:25 qattr [@-1,45:54='expression',<0>,119:43].[@-1,56:59='expr',<0>,119:54]
2022-02-25 13:41:59:466 action-translator LogManager.java:25 qattr [@-1,62:71='bprincipal',<0>,119:60].[@-1,73:77='lista',<0>,119:71]
2022-02-25 13:41:59:466 action-translator LogManager.java:25 qattr [@-1,80:90='listaelseif',<0>,119:78].[@-1,92:96='lista',<0>,119:90]
2022-02-25 13:41:59:466 action-translator LogManager.java:25 qattr [@-1,99:103='belse',<0>,119:97].[@-1,105:109='lista',<0>,119:103]
2022-02-25 13:41:59:469 action-translator LogManager.java:25 translate  $lista = arrayList.New()
2022-02-25 13:41:59:469 action-translator LogManager.java:25 attr [@-1,2:6='lista',<0>,124:7]
2022-02-25 13:41:59:471 action-translator LogManager.java:25 translate 
                                                                            listInt := localctx.(*ListaelseifContext).GetList()
                                                                            for _, e := range listInt {
                                                                                $lista.Add(e.GetInstr())
                                                                            }
    
2022-02-25 13:41:59:471 action-translator LogManager.java:25 attr [@-1,317:321='lista',<0>,128:81]
2022-02-25 13:41:59:473 action-translator LogManager.java:25 translate $instr = control.NewIfInstruccion($expression.expr,$bloque.lista,nil,nil)
2022-02-25 13:41:59:473 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,134:73]
2022-02-25 13:41:59:473 action-translator LogManager.java:25 qattr [@-1,35:44='expression',<0>,134:107].[@-1,46:49='expr',<0>,134:118]
2022-02-25 13:41:59:473 action-translator LogManager.java:25 qattr [@-1,52:57='bloque',<0>,134:124].[@-1,59:63='lista',<0>,134:131]
2022-02-25 13:41:59:477 action-translator LogManager.java:25 translate $instr = funbasica.NewImprimir($expression.expr)
2022-02-25 13:41:59:478 action-translator LogManager.java:25 attr [@-1,1:5='instr',<0>,139:70]
2022-02-25 13:41:59:478 action-translator LogManager.java:25 qattr [@-1,32:41='expression',<0>,139:101].[@-1,43:46='expr',<0>,139:112]
2022-02-25 13:41:59:480 action-translator LogManager.java:25 translate 
                                                                        $instr = other.NewLlamada($ID.text, arrayList.New())
                                                                        $expr = other.NewLlamada($ID.text, arrayList.New())
2022-02-25 13:41:59:480 action-translator LogManager.java:25 attr [@-1,75:79='instr',<0>,149:73]
2022-02-25 13:41:59:480 action-translator LogManager.java:25 qattr [@-1,101:102='ID',<0>,149:99].[@-1,104:107='text',<0>,149:102]
2022-02-25 13:41:59:481 action-translator LogManager.java:25 attr [@-1,201:204='expr',<0>,150:73]
2022-02-25 13:41:59:481 action-translator LogManager.java:25 qattr [@-1,226:227='ID',<0>,150:98].[@-1,229:232='text',<0>,150:101]
2022-02-25 13:41:59:482 action-translator LogManager.java:25 translate 
                                                                        $instr = other.NewLlamada($ID.text, $listaExpresiones.lista)
                                                                        $expr = other.NewLlamada($ID.text, $listaExpresiones.lista)
2022-02-25 13:41:59:482 action-translator LogManager.java:25 attr [@-1,75:79='instr',<0>,152:73]
2022-02-25 13:41:59:483 action-translator LogManager.java:25 qattr [@-1,101:102='ID',<0>,152:99].[@-1,104:107='text',<0>,152:102]
2022-02-25 13:41:59:483 action-translator LogManager.java:25 qattr [@-1,111:126='listaExpresiones',<0>,152:109].[@-1,128:132='lista',<0>,152:126]
2022-02-25 13:41:59:487 action-translator LogManager.java:25 attr [@-1,209:212='expr',<0>,153:73]
2022-02-25 13:41:59:488 action-translator LogManager.java:25 qattr [@-1,234:235='ID',<0>,153:98].[@-1,237:240='text',<0>,153:101]
2022-02-25 13:41:59:488 action-translator LogManager.java:25 qattr [@-1,244:259='listaExpresiones',<0>,153:108].[@-1,261:265='lista',<0>,153:125]
2022-02-25 13:41:59:490 action-translator LogManager.java:25 translate 
    $lista = arrayList.New()

2022-02-25 13:41:59:490 action-translator LogManager.java:25 attr [@-1,7:11='lista',<0>,158:5]
2022-02-25 13:41:59:491 action-translator LogManager.java:25 translate 
2022-02-25 13:41:59:491 action-translator LogManager.java:25 translate 
                                                                        $lista.Add( $expression.expr )
                                                                     
2022-02-25 13:41:59:491 action-translator LogManager.java:25 attr [@-1,75:79='lista',<0>,3:73]
2022-02-25 13:41:59:492 action-translator LogManager.java:25 qattr [@-1,87:96='expression',<0>,3:85].[@-1,98:101='expr',<0>,3:96]
2022-02-25 13:41:59:493 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-02-25 13:41:59:493 action-translator LogManager.java:25 translate 
                                                                                  $LISTA.lista.Add( $expression.expr )
                                                                                  $lista =  $LISTA.lista
                                                                               
2022-02-25 13:41:59:494 action-translator LogManager.java:25 qattr [@-1,85:89='LISTA',<0>,8:83].[@-1,91:95='lista',<0>,8:89]
2022-02-25 13:41:59:495 action-translator LogManager.java:25 qattr [@-1,103:112='expression',<0>,8:101].[@-1,114:117='expr',<0>,8:112]
2022-02-25 13:41:59:496 action-translator LogManager.java:25 attr [@-1,205:209='lista',<0>,9:83]
2022-02-25 13:41:59:496 action-translator LogManager.java:25 qattr [@-1,215:219='LISTA',<0>,9:93].[@-1,221:225='lista',<0>,9:99]
2022-02-25 13:41:59:499 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-02-25 13:41:59:500 action-translator LogManager.java:25 translate 
                                                                        $instr = definicion.NewDeclaracionInicializacion($listides.lista,$tiposvars.tipo,$expression.expr)
                                                                     
2022-02-25 13:41:59:501 action-translator LogManager.java:25 attr [@-1,75:79='instr',<0>,171:73]
2022-02-25 13:41:59:501 action-translator LogManager.java:25 qattr [@-1,124:131='listides',<0>,171:122].[@-1,133:137='lista',<0>,171:131]
2022-02-25 13:41:59:501 action-translator LogManager.java:25 qattr [@-1,140:148='tiposvars',<0>,171:138].[@-1,150:153='tipo',<0>,171:148]
2022-02-25 13:41:59:501 action-translator LogManager.java:25 qattr [@-1,156:165='expression',<0>,171:154].[@-1,167:170='expr',<0>,171:165]
2022-02-25 13:41:59:503 action-translator LogManager.java:25 translate 
                                                                        $instr = definicion.NewDeclaracion($listides.lista,$tiposvars.tipo)
                                                                    
2022-02-25 13:41:59:503 action-translator LogManager.java:25 attr [@-1,75:79='instr',<0>,177:73]
2022-02-25 13:41:59:503 action-translator LogManager.java:25 qattr [@-1,110:117='listides',<0>,177:108].[@-1,119:123='lista',<0>,177:117]
2022-02-25 13:41:59:504 action-translator LogManager.java:25 qattr [@-1,126:134='tiposvars',<0>,177:124].[@-1,136:139='tipo',<0>,177:134]
2022-02-25 13:41:59:510 action-translator LogManager.java:25 translate  $instr = transferenciaFlujo.NewReturn(entorno.VOID,nil)
2022-02-25 13:41:59:523 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,182:70]
2022-02-25 13:41:59:524 action-translator LogManager.java:25 translate  $instr = transferenciaFlujo.NewReturn(entorno.NULL,$expression.expr)
2022-02-25 13:41:59:524 action-translator LogManager.java:25 attr [@-1,2:6='instr',<0>,183:70]
2022-02-25 13:41:59:525 action-translator LogManager.java:25 qattr [@-1,53:62='expression',<0>,183:121].[@-1,64:67='expr',<0>,183:132]
2022-02-25 13:41:59:532 action-translator LogManager.java:25 translate   $lista =  arrayList.New() 
2022-02-25 13:41:59:532 action-translator LogManager.java:25 attr [@-1,3:7='lista',<0>,190:10]
2022-02-25 13:41:59:532 action-translator LogManager.java:25 translate 
2022-02-25 13:41:59:533 action-translator LogManager.java:25 translate $lista.Add(expresion.NewIdentificador($ID.text))
2022-02-25 13:41:59:534 action-translator LogManager.java:25 attr [@-1,1:5='lista',<0>,2:88]
2022-02-25 13:41:59:534 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,2:126].[@-1,42:45='text',<0>,2:129]
2022-02-25 13:41:59:534 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-02-25 13:41:59:536 action-translator LogManager.java:25 translate 
                                                                              $sub.lista.Add(expresion.NewIdentificador($ID.text))
                                                                              $lista = $sub.lista
                                                                          
2022-02-25 13:41:59:536 action-translator LogManager.java:25 qattr [@-1,81:83='sub',<0>,6:79].[@-1,85:89='lista',<0>,6:83]
2022-02-25 13:41:59:536 action-translator LogManager.java:25 qattr [@-1,123:124='ID',<0>,6:121].[@-1,126:129='text',<0>,6:124]
2022-02-25 13:41:59:537 action-translator LogManager.java:25 attr [@-1,213:217='lista',<0>,7:79]
2022-02-25 13:41:59:537 action-translator LogManager.java:25 qattr [@-1,222:224='sub',<0>,7:88].[@-1,226:230='lista',<0>,7:92]
2022-02-25 13:41:59:538 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-02-25 13:41:59:538 action-translator LogManager.java:25 translate $tipo = entorno.INTEGER
2022-02-25 13:41:59:539 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,199:65]
2022-02-25 13:41:59:539 action-translator LogManager.java:25 translate $tipo = entorno.STRING
2022-02-25 13:41:59:539 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,200:65]
2022-02-25 13:41:59:540 action-translator LogManager.java:25 translate $tipo = entorno.FLOAT
2022-02-25 13:41:59:540 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,201:65]
2022-02-25 13:41:59:540 action-translator LogManager.java:25 translate $tipo = entorno.BOOLEAN
2022-02-25 13:41:59:540 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,202:65]
2022-02-25 13:41:59:540 action-translator LogManager.java:25 translate $tipo = entorno.VOID
2022-02-25 13:41:59:540 action-translator LogManager.java:25 attr [@-1,1:4='tipo',<0>,203:65]
2022-02-25 13:41:59:541 action-translator LogManager.java:25 translate $expr = $expr_rel.expr
2022-02-25 13:41:59:546 action-translator LogManager.java:25 attr [@-1,1:4='expr',<0>,220:65]
2022-02-25 13:41:59:550 action-translator LogManager.java:25 qattr [@-1,9:16='expr_rel',<0>,220:73].[@-1,18:21='expr',<0>,220:82]
2022-02-25 13:41:59:552 action-translator LogManager.java:25 translate $expr = $expr_arit.expr
2022-02-25 13:41:59:552 action-translator LogManager.java:25 attr [@-1,1:4='expr',<0>,221:65]
2022-02-25 13:41:59:553 action-translator LogManager.java:25 qattr [@-1,9:17='expr_arit',<0>,221:73].[@-1,19:22='expr',<0>,221:83]
2022-02-25 13:41:59:555 action-translator LogManager.java:25 translate 
2022-02-25 13:41:59:555 action-translator LogManager.java:25 translate $expr = $expr_arit.expr
2022-02-25 13:41:59:556 action-translator LogManager.java:25 attr [@-1,1:4='expr',<0>,2:41]
2022-02-25 13:41:59:556 action-translator LogManager.java:25 qattr [@-1,9:17='expr_arit',<0>,2:49].[@-1,19:22='expr',<0>,2:59]
2022-02-25 13:41:59:556 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-02-25 13:41:59:558 action-translator LogManager.java:25 translate $expr = expresion.NewOperacion($opIz.expr,$op.text,$opDe.expr,false)
2022-02-25 13:41:59:558 action-translator LogManager.java:25 attr [@-1,1:4='expr',<0>,5:206]
2022-02-25 13:41:59:558 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,5:237].[@-1,37:40='expr',<0>,5:242]
2022-02-25 13:41:59:560 action-translator LogManager.java:25 qattr [@-1,43:44='op',<0>,5:248].[@-1,46:49='text',<0>,5:251]
2022-02-25 13:41:59:562 action-translator LogManager.java:25 qattr [@-1,52:55='opDe',<0>,5:257].[@-1,57:60='expr',<0>,5:262]
2022-02-25 13:41:59:562 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2022-02-25 13:41:59:565 action-translator LogManager.java:25 translate 
2022-02-25 13:41:59:566 action-translator LogManager.java:25 translate $expr = expresion.NewOperacion($opU.expr,"-",nil,true)
2022-02-25 13:41:59:566 action-translator LogManager.java:25 attr [@-1,1:4='expr',<0>,2:104]
2022-02-25 13:41:59:568 action-translator LogManager.java:25 qattr [@-1,32:34='opU',<0>,2:135].[@-1,36:39='expr',<0>,2:139]
2022-02-25 13:41:59:568 action-translator LogManager.java:25 translate $expr = $expr_valor.expr
2022-02-25 13:41:59:569 action-translator LogManager.java:25 attr [@-1,1:4='expr',<0>,3:85]
2022-02-25 13:41:59:570 action-translator LogManager.java:25 qattr [@-1,9:18='expr_valor',<0>,3:93].[@-1,20:23='expr',<0>,3:104]
2022-02-25 13:41:59:570 action-translator LogManager.java:25 translate $expr = $expression.expr
2022-02-25 13:41:59:571 action-translator LogManager.java:25 attr [@-1,1:4='expr',<0>,4:117]
2022-02-25 13:41:59:571 action-translator LogManager.java:25 qattr [@-1,9:18='expression',<0>,4:125].[@-1,20:23='expr',<0>,4:136]
2022-02-25 13:41:59:572 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-02-25 13:41:59:573 action-translator LogManager.java:25 translate $expr = expresion.NewOperacion($opIz.expr,$op.text,$opDe.expr,false)
2022-02-25 13:41:59:574 action-translator LogManager.java:25 attr [@-1,1:4='expr',<0>,7:152]
2022-02-25 13:41:59:574 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,7:183].[@-1,37:40='expr',<0>,7:188]
2022-02-25 13:41:59:575 action-translator LogManager.java:25 qattr [@-1,43:44='op',<0>,7:194].[@-1,46:49='text',<0>,7:197]
2022-02-25 13:41:59:576 action-translator LogManager.java:25 qattr [@-1,52:55='opDe',<0>,7:203].[@-1,57:60='expr',<0>,7:208]
2022-02-25 13:41:59:576 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-02-25 13:41:59:577 action-translator LogManager.java:25 translate $expr = expresion.NewOperacion($opIz.expr,$op.text,$opDe.expr,false)
2022-02-25 13:41:59:577 action-translator LogManager.java:25 attr [@-1,1:4='expr',<0>,8:162]
2022-02-25 13:41:59:577 action-translator LogManager.java:25 qattr [@-1,32:35='opIz',<0>,8:193].[@-1,37:40='expr',<0>,8:198]
2022-02-25 13:41:59:578 action-translator LogManager.java:25 qattr [@-1,43:44='op',<0>,8:204].[@-1,46:49='text',<0>,8:207]
2022-02-25 13:41:59:578 action-translator LogManager.java:25 qattr [@-1,52:55='opDe',<0>,8:213].[@-1,57:60='expr',<0>,8:218]
2022-02-25 13:41:59:578 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 4)
2022-02-25 13:41:59:578 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2022-02-25 13:41:59:580 action-translator LogManager.java:25 translate $expr = $primitivo.expr
2022-02-25 13:41:59:581 action-translator LogManager.java:25 attr [@-1,1:4='expr',<0>,240:65]
2022-02-25 13:41:59:581 action-translator LogManager.java:25 qattr [@-1,9:17='primitivo',<0>,240:73].[@-1,19:22='expr',<0>,240:83]
2022-02-25 13:41:59:582 action-translator LogManager.java:25 translate $expr = $llamada.expr
2022-02-25 13:41:59:583 action-translator LogManager.java:25 attr [@-1,1:4='expr',<0>,241:65]
2022-02-25 13:41:59:583 action-translator LogManager.java:25 qattr [@-1,9:15='llamada',<0>,241:73].[@-1,17:20='expr',<0>,241:81]
2022-02-25 13:41:59:586 action-translator LogManager.java:25 translate 
                                                                    num,err := strconv.Atoi($NUMBER.text)
                                                                    if err!= nil{
                                                                        fmt.Println(err)
                                                                    }
                                                                    $expr = expresion.NewPrimitivo (num,entorno.INTEGER)
                                                                
2022-02-25 13:41:59:586 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,246:93].[@-1,102:105='text',<0>,246:100]
2022-02-25 13:41:59:588 action-translator LogManager.java:25 attr [@-1,422:425='expr',<0>,250:69]
2022-02-25 13:41:59:588 action-translator LogManager.java:25 translate 
                                                                     num,err := strconv.ParseFloat($FLOAT.text,64)
                                                                     if err!= nil{
                                                                         fmt.Println(err)
                                                                     }
                                                                     $expr = expresion.NewPrimitivo (num,entorno.FLOAT)
                                                                
2022-02-25 13:41:59:588 action-translator LogManager.java:25 qattr [@-1,102:106='FLOAT',<0>,253:100].[@-1,108:111='text',<0>,253:106]
2022-02-25 13:41:59:589 action-translator LogManager.java:25 attr [@-1,435:438='expr',<0>,257:70]
2022-02-25 13:41:59:589 action-translator LogManager.java:25 translate 
                                                                    str:= $STRING.text[1:len($STRING.text)-1]
                                                                    $expr = expresion.NewPrimitivo(str,entorno.STRING)
                                                                
2022-02-25 13:41:59:590 action-translator LogManager.java:25 qattr [@-1,77:82='STRING',<0>,261:75].[@-1,84:87='text',<0>,261:82]
2022-02-25 13:41:59:599 action-translator LogManager.java:25 qattr [@-1,96:101='STRING',<0>,261:94].[@-1,103:106='text',<0>,261:101]
2022-02-25 13:41:59:600 action-translator LogManager.java:25 attr [@-1,182:185='expr',<0>,262:69]
2022-02-25 13:41:59:601 action-translator LogManager.java:25 translate  $expr = expresion.NewIdentificador($ID.text)
2022-02-25 13:41:59:601 action-translator LogManager.java:25 attr [@-1,2:5='expr',<0>,265:66]
2022-02-25 13:41:59:601 action-translator LogManager.java:25 qattr [@-1,37:38='ID',<0>,265:101].[@-1,40:43='text',<0>,265:104]
2022-02-25 13:41:59:602 action-translator LogManager.java:25 translate  $expr = expresion.NewPrimitivo(true,entorno.BOOLEAN)
2022-02-25 13:41:59:602 action-translator LogManager.java:25 attr [@-1,2:5='expr',<0>,267:66]
2022-02-25 13:41:59:602 action-translator LogManager.java:25 translate  $expr = expresion.NewPrimitivo(false,entorno.BOOLEAN)
2022-02-25 13:41:59:602 action-translator LogManager.java:25 attr [@-1,2:5='expr',<0>,268:66]
2022-02-25 13:42:00:925 action-translator LogManager.java:25 translate 
    type  Prueba2 struct {
        Op1 int
        Operador string
        Op2 int
    }

2022-02-25 13:42:00:925 action-translator LogManager.java:25 translate 

    import "OLC2/analizador/ast"
    import "OLC2/analizador/ast/interfaces"
    import "OLC2/analizador/ast/expresion"
    import "OLC2/analizador/ast/funbasica"
    import "OLC2/analizador/ast/definicion"
    import "OLC2/analizador/ast/control"
    import "OLC2/analizador/ast/other"
    import "OLC2/analizador/ast/transferenciaFlujo"
    import "OLC2/analizador/entorno"
    import "OLC2/analizador/entorno/Simbolos"
    import arrayList "github.com/colegno/arraylist"

2022-02-25 13:42:00:925 action-translator LogManager.java:25 translate 

    import "OLC2/analizador/ast"
    import "OLC2/analizador/ast/interfaces"
    import "OLC2/analizador/ast/expresion"
    import "OLC2/analizador/ast/funbasica"
    import "OLC2/analizador/ast/definicion"
    import "OLC2/analizador/ast/control"
    import "OLC2/analizador/ast/other"
    import "OLC2/analizador/ast/transferenciaFlujo"
    import "OLC2/analizador/entorno"
    import "OLC2/analizador/entorno/Simbolos"
    import arrayList "github.com/colegno/arraylist"

2022-02-25 13:42:01:294 action-translator LogManager.java:25 translate 
    type  Prueba2 struct {
        Op1 int
        Operador string
        Op2 int
    }

2022-02-25 13:42:01:294 action-translator LogManager.java:25 translate 

    import "OLC2/analizador/ast"
    import "OLC2/analizador/ast/interfaces"
    import "OLC2/analizador/ast/expresion"
    import "OLC2/analizador/ast/funbasica"
    import "OLC2/analizador/ast/definicion"
    import "OLC2/analizador/ast/control"
    import "OLC2/analizador/ast/other"
    import "OLC2/analizador/ast/transferenciaFlujo"
    import "OLC2/analizador/entorno"
    import "OLC2/analizador/entorno/Simbolos"
    import arrayList "github.com/colegno/arraylist"

2022-02-25 13:42:01:295 action-translator LogManager.java:25 translate 

    import "OLC2/analizador/ast"
    import "OLC2/analizador/ast/interfaces"
    import "OLC2/analizador/ast/expresion"
    import "OLC2/analizador/ast/funbasica"
    import "OLC2/analizador/ast/definicion"
    import "OLC2/analizador/ast/control"
    import "OLC2/analizador/ast/other"
    import "OLC2/analizador/ast/transferenciaFlujo"
    import "OLC2/analizador/entorno"
    import "OLC2/analizador/entorno/Simbolos"
    import arrayList "github.com/colegno/arraylist"

