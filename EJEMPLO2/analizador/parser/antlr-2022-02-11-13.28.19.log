2022-02-11 13:28:17:369 grammar LogManager.java:25 before: (LEXER_GRAMMAR CalLexer (RULES (RULE LP (BLOCK (ALT '('))) (RULE RP (BLOCK (ALT ')'))) (RULE L_LLAVE (BLOCK (ALT '{'))) (RULE R_LLAVE (BLOCK (ALT '}'))) (RULE SYSTEM (BLOCK (ALT 'system'))) (RULE OUT (BLOCK (ALT 'out'))) (RULE PRINTLN (BLOCK (ALT 'println'))) (RULE INTTYPE (BLOCK (ALT 'int'))) (RULE FLOATTYPE (BLOCK (ALT 'float'))) (RULE STRINGTYPE (BLOCK (ALT 'string'))) (RULE BOOLTYPE (BLOCK (ALT 'boolean'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE AND (BLOCK (ALT '&&'))) (RULE OR (BLOCK (ALT '||'))) (RULE NOT (BLOCK (ALT '!'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE DIFERENTE (BLOCK (ALT '!='))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false' ESC_SEQ))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \r\n\t])))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' '))))) (RULE AB (BLOCK (ALT A B))) (RULE A (RULEMODIFIERS fragment) (BLOCK (ALT 'a') (ALT 'A'))) (RULE B (RULEMODIFIERS fragment) (BLOCK (ALT 'a') (ALT 'A')))))
2022-02-11 13:28:17:429 grammar LogManager.java:25 after: (LEXER_GRAMMAR CalLexer (RULES (RULE LP (BLOCK (ALT '('))) (RULE RP (BLOCK (ALT ')'))) (RULE L_LLAVE (BLOCK (ALT '{'))) (RULE R_LLAVE (BLOCK (ALT '}'))) (RULE SYSTEM (BLOCK (ALT 'system'))) (RULE OUT (BLOCK (ALT 'out'))) (RULE PRINTLN (BLOCK (ALT 'println'))) (RULE INTTYPE (BLOCK (ALT 'int'))) (RULE FLOATTYPE (BLOCK (ALT 'float'))) (RULE STRINGTYPE (BLOCK (ALT 'string'))) (RULE BOOLTYPE (BLOCK (ALT 'boolean'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE COMA (BLOCK (ALT ','))) (RULE PTCOMA (BLOCK (ALT ';'))) (RULE AND (BLOCK (ALT '&&'))) (RULE OR (BLOCK (ALT '||'))) (RULE NOT (BLOCK (ALT '!'))) (RULE IGUAL (BLOCK (ALT '='))) (RULE DIFERENTE (BLOCK (ALT '!='))) (RULE MAYORIGUAL (BLOCK (ALT '>='))) (RULE MENORIGUAL (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE FLOAT (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) [.] (+ (BLOCK (ALT [0-9])))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT [a-zA-Z_] (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE TRUE (BLOCK (ALT 'true'))) (RULE FALSE (BLOCK (ALT 'false' ESC_SEQ))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \r\n\t])))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' ')))) (RULE AB (BLOCK (ALT A B))) (RULE A (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'a' 'A')))) (RULE B (RULEMODIFIERS fragment) (BLOCK (ALT (SET 'a' 'A'))))))
